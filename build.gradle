plugins {
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'jacoco'
}

group = 'com.seucondominio'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // JWT for Security
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok for boilerplate code reduction
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Boot Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database Drivers
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Inclui JUnit 5
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0' // Versão atualizada
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0' // Versão atualizada
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-parameters']
    doFirst {
        println "Compiler args: ${options.compilerArgs}"
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
